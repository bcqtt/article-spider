# 运行用户
user  nobody;
#启动进程,通常设置成和cpu的数量相等
worker_processes  4;

#全局错误日志及PID文件
error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;

worker_rlimit_nofile 65535;

#工作模式及连接数上限
events {
	#use epoll;  #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    worker_connections  51200; #单个后台worker process进程的最大并发链接数
}

#设定http服务器，利用它的反向代理功能提供负载均衡支持
http {
	#设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
	
	charset utf-8;
	
	server_names_hash_bucket_size 128;
	client_header_buffer_size 32k;
	large_client_header_buffers 4 32k;
	
	# 允许客户端请求的最大单个文件字节数
	client_max_body_size 300m;
	
	# 缓冲区代理缓冲用户端请求的额最大字节数，即先保存到本地再转给用户
	client_body_buffer_size 512k;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

	#sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
	#必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

	#连接超时时间
    keepalive_timeout  65;
	
	tcp_nodelay on;
	
	# 跟后端服务器连接的超时时间，发起握手等待响应的超时时间
	proxy_connect_timeout 600;
	# 连接成功后，等待后端服务器响应时间，其实已经进入后端排队等待处理
	proxy_read_timeout 600;
	# 后端服务器数据回传时间
	proxy_send_timeout 600;
	# 代理请求缓冲区，保存用户头信息
	proxy_buffer_size 16k;
	proxy_buffers 4 32k;
	# 如果系统很忙的时候可以申请更大的proxy_buffers,官方推荐*2
	proxy_busy_buffers_size 64k;
	# proxy缓存临时存放发小
	proxy_temp_file_write_size 64k;
	
	#开启gzip压缩
    gzip  on;
	gzip_min_length 1k;
	gzip_buffers 4 16k;
	gzip_http_version 1.1;
	gzip_comp_level 2;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml;
	gzip_vary on;
	
	#设定负载均衡的服务器列表
	upstream tomcate_server_pool {
	    #weigth参数表示权值，权值越高被分配到的几率越大，可不配置
    	#本机上的Squid开启3128端口
		server 192.168.87.127:80 weight=5;;
		server 192.168.87.128:80 weight=1;;
		server 192.168.87.129:80 weight=6;;
	}
	
	upstream httpapi_server_pool {
		server 192.168.87.131:80;
	}

	# 第一个虚拟主机，反向代理tomcate_server_pool这组服务器
    server {
        listen       80;
        #定义使用www.xx.com访问
        server_name  www.xx.com;
		index  index.html index.htm index.jsp; #定义首页索引文件的名称

		#设定本虚拟主机的访问日志
        access_log  logs/$host.access.log  main;
		
		#配置图片根目录
		location ~* \.(jpg|gif|png|bmp|swf)$ {
			root   F:/pic/;  #定义服务器的默认网站根目录位置
			expires 30d;
		}
		
		location ~* \.(js|css)$ {
			expires 1h;
		}
		
		location / {
			proxy_set_header Host 192.168.87.129;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_pass   http://tomcate_server_pool;
			# 如果后端服务器返回502 504 执行超时等错误，自动请求转发到upstream负载均衡池中的另一台服务器，实现故障转移
			proxy_next_upstream  http_502 http_504 error timeout invalid_header;
		}

    }
	
	# 第一个虚拟主机，反向代理httpapi_server_pool这组服务器
    server {
        listen       80;
        server_name  192.168.87.131;

        access_log  logs/$host.access.log  main;
		
		#访问http://192.168.87.131/search-api_local/search/associationword/key/***,反向代理httpapi_server_pool这组服务器
		location /search/associationword/key/ {
			proxy_pass   http://httpapi_server_pool;
			proxy_set_header Host $host;
		}
		
		# 除了访问/search/associationword/key/之外的http://192.168.87.131/***地址，反向代理tomcate_server_pool这组服务器
		location / {
			proxy_set_header Host 192.168.87.131;
			proxy_set_header X-Forwarded-For $remote_addr;
			proxy_pass   http://tomcate_server_pool;
		}

    }

}
